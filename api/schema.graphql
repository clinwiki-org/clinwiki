type Agg {
  buckets: [AggBucket!]!
  docCountErrorUpperBound: Int!
  name: String!
  sumOtherDocCount: Int!
}

type AggBucket {
  docCount: Int!
  key: String!
  keyAsString: String
}

type AggFilter {
  """
  The field we are filtering on
  """
  field: String!

  """
  The start value (inclusive) for a range query
  """
  gte: String

  """
  Whether to include missing fields
  """
  includeMissingFields: Boolean

  """
  Location lat
  """
  lat: Float

  """
  Location Long
  """
  long: Float

  """
  The end value (inclusive) for a range query
  """
  lte: String

  """
  Radius used for location search
  """
  radius: String

  """
  The values we are filtering for that field
  """
  values: [String!]!

  """
  Zipcode used for location search
  """
  zipcode: String
}

"""
An Agg Filter
"""
input AggFilterInput {
  """
  The field we are filtering on
  """
  field: String!

  """
  The start value (inclusive) for a range query
  """
  gte: String

  """
  Whether to include missing fields in the query
  """
  includeMissingFields: Boolean

  """
  Location lattituted
  """
  lat: Float

  """
  Location longitude
  """
  long: Float

  """
  The end value (inclusive) for a range query
  """
  lte: String

  """
  Radius used for location search
  """
  radius: String

  """
  The values we are filtering for that field
  """
  values: [String!] = []

  """
  Zipcode used for location search
  """
  zipcode: String
}

type Autocomplete {
  isCrowd: Boolean!
  name: String!
  results: [AggBucket!]!
}

type BucketKeyValuePairs {
  key: String
  label: String
}

"""
Autogenerated input type of BulkListUpdate
"""
input BulkListUpdateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  updates: [StudyFacetStateInput!]!
}

"""
Autogenerated return type of BulkListUpdate
"""
type BulkListUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of BulkQueryUpdate
"""
input BulkQueryUpdateInput {
  aggState: [FacetStateInput!]!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  searchParams: SearchInput!
}

"""
Autogenerated return type of BulkQueryUpdate
"""
type BulkQueryUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  test: [String!]
  undoActions: [StudyFacetState!]
}

type CentralContact {
  contactType: String
  email: String
  name: String
  phone: String
}

type Condition {
  downcaseName: String!
  id: Int!
  name: String!
}

"""
Autogenerated input type of CopySiteView
"""
input CopySiteViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  default: Boolean!
  description: String
  name: String!
  siteId: Int!
  siteViewId: Int!
  type: String
  url: String
}

"""
Autogenerated return type of CopySiteView
"""
type CopySiteViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  siteView: SiteView
}

"""
Autogenerated input type of CreateFeed
"""
input CreateFeedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  kind: FeedKind!
  name: String!
  searchParams: SearchInput!
}

"""
Autogenerated return type of CreateFeed
"""
type CreateFeedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  feed: Feed
}

"""
Autogenerated input type of CreatePageView
"""
input CreatePageViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  default: Boolean
  mutations: [SiteViewMutationInput!]
  pageType: String
  siteId: Int!
  template: String!
  title: String!
  url: String!
}

"""
Autogenerated return type of CreatePageView
"""
type CreatePageViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  pageView: PageView
}

"""
Autogenerated input type of CreateReaction
"""
input CreateReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nctId: String!
  reactionKindId: Int!
}

"""
Autogenerated return type of CreateReaction
"""
type CreateReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  reaction: Reaction
}

"""
Autogenerated input type of CreateSavedSearch
"""
input CreateSavedSearchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  searchHash: String!
  url: String!
  userId: Int
}

"""
Autogenerated return type of CreateSavedSearch
"""
type CreateSavedSearchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  savedSearch: SavedSearch!
}

"""
Autogenerated input type of CreateSite
"""
input CreateSiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  editorEmails: [String!]
  hideDonation: Boolean
  name: String!
  reactionsConfig: String
  skipLanding: Boolean
  subdomain: String!
  themes: String
  userRank: String
}

"""
Autogenerated return type of CreateSite
"""
type CreateSitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  site: Site
}

"""
Autogenerated input type of CreateSiteView
"""
input CreateSiteViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  default: Boolean!
  description: String
  mutations: [SiteViewMutationInput!]!
  name: String!
  siteId: Int!
  type: String
  url: String
}

"""
Autogenerated return type of CreateSiteView
"""
type CreateSiteViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  siteView: SiteView
}

"""
Autogenerated input type of CreateStudyViewLog
"""
input CreateStudyViewLogInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nctId: String!
  userId: Int
}

"""
Autogenerated return type of CreateStudyViewLog
"""
type CreateStudyViewLogPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  studyViewLog: StudyViewLog!
}

type CrowdValue {
  crowdValue: String
}

type CrumbResultSection {
  search: Boolean!
}

"""
An ISO 8601-encoded datetime
"""
scalar DateTime

"""
Autogenerated input type of DeleteFeed
"""
input DeleteFeedInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Id of the feed to delete
  """
  id: Int!
}

"""
Autogenerated return type of DeleteFeed
"""
type DeleteFeedPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  feed: Feed
}

"""
Autogenerated input type of DeletePageView
"""
input DeletePageViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Id of the site view to delete
  """
  id: Int!
}

"""
Autogenerated return type of DeletePageView
"""
type DeletePageViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  error: String
  pageView: PageView
}

"""
Autogenerated input type of DeleteReaction
"""
input DeleteReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of reaction
  """
  id: Int!
}

"""
Autogenerated return type of DeleteReaction
"""
type DeleteReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  reaction: Reaction
}

"""
Autogenerated input type of DeleteReview
"""
input DeleteReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: Int!
}

"""
Autogenerated return type of DeleteReview
"""
type DeleteReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  success: Boolean!
}

"""
Autogenerated input type of DeleteSavedSearch
"""
input DeleteSavedSearchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: Int!
  userId: Int
}

"""
Autogenerated return type of DeleteSavedSearch
"""
type DeleteSavedSearchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  savedSearch: SavedSearch
  success: Boolean
}

"""
Autogenerated input type of DeleteSearchLog
"""
input DeleteSearchLogInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Id of the search log  to delete
  """
  id: Int!
}

"""
Autogenerated return type of DeleteSearchLog
"""
type DeleteSearchLogPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  searchLog: SearchLog
}

"""
Autogenerated input type of DeleteSite
"""
input DeleteSiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Id of the site to delete
  """
  id: Int!
}

"""
Autogenerated return type of DeleteSite
"""
type DeleteSitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  site: Site
}

"""
Autogenerated input type of DeleteSiteView
"""
input DeleteSiteViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Id of the site view to delete
  """
  id: Int!
}

"""
Autogenerated return type of DeleteSiteView
"""
type DeleteSiteViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  error: String
  siteView: Site
}

"""
Autogenerated input type of DeleteStudyViewLog
"""
input DeleteStudyViewLogInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Id of the study_view log  to delete
  """
  id: Int!
}

"""
Autogenerated return type of DeleteStudyViewLog
"""
type DeleteStudyViewLogPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  studyViewLog: StudyViewLog
}

"""
Autogenerated input type of DeleteWikiLabel
"""
input DeleteWikiLabelInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Label key
  """
  key: String!
  nctId: String!
}

"""
Autogenerated return type of DeleteWikiLabel
"""
type DeleteWikiLabelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  wikiPage: WikiPage
}

"""
Autogenerated input type of DeleteWikiTag
"""
input DeleteWikiTagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nctId: String!

  """
  Tag value
  """
  value: String!
}

"""
Autogenerated return type of DeleteWikiTag
"""
type DeleteWikiTagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  wikiPage: WikiPage
}

type Design {
  """
  Design 
  """
  allocation: String

  """
  Caregiver masked?
  """
  caregiverMasked: Boolean

  """
  Design id
  """
  id: Int!

  """
  Interventional model
  """
  interventionalModel: String

  """
  Intervention model description
  """
  interventionalModelDescription: String

  """
  Investigator masked?
  """
  investigatorMasked: Boolean

  """
  Design masking
  """
  masking: String

  """
  Description of masking
  """
  maskingDescription: String

  """
  Observational model
  """
  observationalModel: String

  """
  Assessor masked?
  """
  outcomesAssessorMasked: Boolean

  """
  Design purpose
  """
  primaryPurpose: String

  """
  subject masked?
  """
  subjectMasked: Boolean

  """
  Time
  """
  timePerspective: String
}

type DesignGroup {
  description: String
  groupType: String

  """
  Intervention id
  """
  id: Int!
  interventions: [Intervention!]
  title: String
}

enum Diff {
  """
  Deleted line
  """
  DEL

  """
  A comment line
  """
  DIFFCOMMENT

  """
  Inserted line
  """
  INS

  """
  Unchanged line
  """
  UNCHANGED
}

"""
Elasticsearch indexed study values
"""
type ElasticStudy implements Timestamps {
  acronym: String
  averageRating: Float!
  baselinePopulation: String
  briefSummary: String
  briefTitle: String!
  completionDate: DateTime
  conditions: String
  createdAt: DateTime!
  detailedDescription: String
  dispositionFirstPostedDate: String
  dispositionFirstPostedDateType: String
  dispositionFirstSubmittedDate: String
  dispositionFirstSubmittedQcDate: String
  enrollment: Int
  enrollmentType: String
  expandedAccessTypeTreatment: String
  facilityStates: [String!]!
  hasExpandedAccess: String
  interventions: [String!]!
  interventionsMeshTerms: [String!]!
  ipdAccessCriteria: String
  ipdTimeFrame: String
  ipdUrl: String
  isFdaRegulated: Boolean!
  isFdaRegulatedDevice: String
  isFdaRegulatedDrug: String
  lastKnownStatus: String
  lastUpdatePostedDate: String
  lastUpdatePostedDateType: String
  lastUpdateSubmittedDate: String
  lastUpdateSubmittedQcDate: String
  nctId: String!
  numberOfArms: String
  numberOfGroups: String
  officialTitle: String
  overallStatus: String!
  phase: String
  planToShareIpd: String
  planToShareIpdDescription: String
  resultsFirstPostedDate: String
  resultsFirstPostedDateType: String
  resultsFirstSubmittedDate: String
  resultsFirstSubmittedQcDate: String
  reviewsCount: Int
  source: String!
  startDate: DateTime
  studyFirstPostedDate: String
  studyFirstPostedDateType: String
  studyFirstSubmittedDate: String
  studyFirstSubmittedQcDate: String
  studyType: String!
  studyViewCount: Int
  updatedAt: DateTime!
  whyStopped: String
}

"""
Autogenerated input type of ExportToCsv
"""
input ExportToCsvInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  searchHash: String!
  siteViewId: Int!
}

"""
Autogenerated return type of ExportToCsv
"""
type ExportToCsvPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  searchExport: SearchExport
}

type ExpressionCount {
  count: Int!
  name: String!
}

"""
AACT Intervention entity with additional info
"""
type ExtendedIntervention {
  """
  Intervention description
  """
  description: String

  """
  Design group description
  """
  groupDescription: String

  """
  Design group name
  """
  groupName: String

  """
  Design group type
  """
  groupType: String

  """
  Intervention id
  """
  id: Int!

  """
  Intervention name
  """
  name: String
  nctId: String!

  """
  Other intervention name
  """
  otherName: String

  """
  Intervention type
  """
  type: String
}

"""
Describe the state of a single facet.
"""
type FacetState {
  enable: Boolean
  name: String
  value: String
}
input VisibleOptions {
  kind: FilterKind!
  values: [String!]!
}
"""
Describe the state of a single facet.
"""
input FacetStateInput {
  """
  """
  enable: Boolean!

  """
  facet name
  """
  name: String!

  """
  facet value
  """
  value: String!
}

type Facility {
  city: String!
  contacts: [FacilityContact!]!
  country: String!
  id: Int!
  location: Location
  name: String
  nctId: String!
  state: String!
  status: String!
  zip: String!
}

type FacilityContact {
  contactType: String!
  email: String
  id: Int!
  name: String
  nctId: String!
  phone: String
}

"""
Feed is a saved search
"""
type Feed {
  """
  Id
  """
  id: Int!

  """
  Feeds can be designed for different purposes, that are distingiuhed by kind
  """
  kind: FeedKind!

  """
  Name
  """
  name: String!

  """
  Owner of the feed
  """
  owner: User!

  """
  Id of the owner
  """
  ownerId: Int!

  """
  Return study decorated with navigation cursors for current feed
  """
  studyEdge(
    """
    When id is null returns first edge in the feed.
    """
    id: String
  ): StudyEdge
}

enum FeedKind {
  """
  Feed designed for adding reviews
  """
  REVIEW_WORKFLOW
}

enum FieldDisplay {
  BAR_CHART
  CHECKBOX
  CRUMBS_ONLY
  DATE
  DATE_RANGE
  DROP_DOWN
  GREATER_THAN_DROP_DOWN
  GREATER_THAN_RANGE
  LESS_THAN_DROP_DOWN
  LESS_THAN_RANGE
  LOCATION
  MULTISELECT
  NUMBER_RANGE
  PIE_CHART
  STAR
  STRING
}

enum FilterKind {
  BLACKLIST
  WHITELIST
}

type Health {
  """
  Whether the DB connection is healthy
  """
  healthy: Boolean!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
AACT Intervention entity
"""
type Intervention {
  """
  Intervention description
  """
  description: String

  """
  Design groups assosiated with intervention
  """
  designGroups: [DesignGroup!]!

  """
  Intervention id
  """
  id: Int!

  """
  Other name for intervention
  """
  interventionOtherNames: [InterventionOther!]

  """
  Intervention name
  """
  name: String

  """
  Intervention type
  """
  type: String

  """
  Wikipedia article searched by name. Use sparingly as it actually hits wikipedia api to get the data.
  """
  wikipediaArticle: WikipediaArticle
}

type InterventionOther {
  """
  Intervention other id
  """
  id: Int!

  """
  Intervention  other name
  """
  name: String
}

type Location {
  latitude: Float
  longitude: Float
  status: String!
}

type Meta {
  crowdKey: String
  crowdValueList: [CrowdValue!]
}

type Mutation {
  bulkListUpdate(input: BulkListUpdateInput!): BulkListUpdatePayload
  bulkQueryUpdate(input: BulkQueryUpdateInput!): BulkQueryUpdatePayload
  copySiteView(input: CopySiteViewInput!): CopySiteViewPayload
  createFeed(input: CreateFeedInput!): CreateFeedPayload
  createPageView(input: CreatePageViewInput!): CreatePageViewPayload
  createReaction(input: CreateReactionInput!): CreateReactionPayload
  createSavedSearch(input: CreateSavedSearchInput!): CreateSavedSearchPayload
  createSite(input: CreateSiteInput!): CreateSitePayload
  createSiteView(input: CreateSiteViewInput!): CreateSiteViewPayload
  createStudyViewLog(input: CreateStudyViewLogInput!): CreateStudyViewLogPayload
  deleteFeed(input: DeleteFeedInput!): DeleteFeedPayload
  deletePageView(input: DeletePageViewInput!): DeletePageViewPayload
  deleteReaction(input: DeleteReactionInput!): DeleteReactionPayload
  deleteReview(input: DeleteReviewInput!): DeleteReviewPayload
  deleteSavedSearch(input: DeleteSavedSearchInput!): DeleteSavedSearchPayload
  deleteSearchLog(input: DeleteSearchLogInput!): DeleteSearchLogPayload
  deleteSite(input: DeleteSiteInput!): DeleteSitePayload
  deleteSiteView(input: DeleteSiteViewInput!): DeleteSiteViewPayload
  deleteStudyViewLog(input: DeleteStudyViewLogInput!): DeleteStudyViewLogPayload
  deleteWikiLabel(input: DeleteWikiLabelInput!): DeleteWikiLabelPayload
  deleteWikiTag(input: DeleteWikiTagInput!): DeleteWikiTagPayload
  exportToCsv(input: ExportToCsvInput!): ExportToCsvPayload
  provisionSearchHash(input: SearchHashMutationInput!): SearchHashMutationPayload
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload
  signIn(input: SignInInput!): SignInPayload
  signUp(input: SignUpInput!): SignUpPayload
  updatePageView(input: UpdatePageViewInput!): UpdatePageViewPayload
  updatePassword(input: UpdatePasswordInput!): UpdatePasswordPayload
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  updateReaction(input: UpdateReactionInput!): UpdateReactionPayload
  updateSite(input: UpdateSiteInput!): UpdateSitePayload
  updateSiteView(input: UpdateSiteViewInput!): UpdateSiteViewPayload
  updateWikiContent(input: UpdateWikiContentInput!): UpdateWikiContentPayload
  updateWikiSections(input: UpdateWikiSectionsInput!): UpdateWikiSectionsPayload
  updateWorkflowsView(input: UpdateWorkflowsViewInput!): UpdateWorkflowsViewPayload
  upsertReview(input: UpsertReviewInput!): UpsertReviewPayload
  upsertWikiLabel(input: UpsertWikiLabelInput!): UpsertWikiLabelPayload
  upsertWikiTag(input: UpsertWikiTagInput!): UpsertWikiTagPayload
  reindexAll: String
  reindexStudy(input: String): String
  reindexDocument(primaryKey: String, primaryKeyList: String, indexName: String): String
}

type OverallOfficial {
  affiliation: String
  name: String
  role: String
}

type PageView {
  default: Boolean!
  id: Int!
  pageType: String!
  template: String!
  title: String!
  updates: PageViewConfig
  url: String!
}

type PageViewConfig {
  blank: String!
}

type PresearchButtonSection {
  name: String!
  target: String!
}

type PublicUser {
  contributions: Int!

  """
  First name
  """
  firstName: String

  """
  Id
  """
  id: Int!

  """
  Last name
  """
  lastName: String
  pictureUrl: String
  rank: String

  """
  Number of reviews the user has done
  """
  reviewCount: Int!
  reviews: [Review!]!
}

type Query {
  aggBuckets(configType: String, params: SearchInput, returnAll: Boolean, searchHash: String, url: String,  aggBucketsWanted: VisibleOptions!): SearchResultSet!
  autocomplete(aggFields: [String!]!, crowdAggFields: [String!]!, params: SearchInput, searchHash: String, url: String): SearchResultSet!
  crowdAggBuckets(configType: String, params: SearchInput!, returnAll: Boolean, url: String, bucketsWanted: [String!]): SearchResultSet!
  openAggBuckets(configType: String, params: SearchInput2!, returnAll: Boolean, url: String, aggBucketsWanted: [VisibleOptions!], crowdBucketsWanted: [VisibleOptions!]): SearchResultSet!
  openCrowdAggBuckets(configType: String, params: SearchInput2!, returnAll: Boolean, url: String, aggBucketsWanted: [VisibleOptions!], crowdBucketsWanted: [VisibleOptions!]): SearchResultSet!
  crowdAggFacets(crowdBucketsWantedSuggestedLabels: [String!]): SearchResultSet!
  feed(id: Int!): Feed
  health: Health!
  intervention(id: Int!): Intervention

  """
  Current logged in user
  """
  me: User

  """
  All reaction Types
  """
  reactionKinds: [ReactionKind!]

  """
  Single saved search
  """
  savedSearch(userId: Int): [SavedSearch!]

  """
  Searches params by searchHash on server and `params` argument into it
  """
  search(params: SearchInput, searchHash: String): SearchResultSet

  """
  Retrieve an export by ID
  """
  searchExport(searchExportId: Int!): SearchExport

  """
  Single search log
  """
  searchLog(userId: Int): [SearchLog!]

  """
  Search params from hash
  """
  searchParams(hash: String): SearchParams

  """
  If id is missing, returns current site. If id == 0, returns default site
  """
  site(id: Int): Site
  study(nctId: String!): Study

  """
  Public Profile User
  """
  user(userId: Int!): PublicUser!

  """
  Workflows config
  """
  workflowsView: WorkflowsView!
}

type Reaction {
  """
  Id
  """
  id: Int!
  nctId: String!

  """
  Type of reaction such as downvote
  """
  reactionKind: ReactionKind!

  """
  id of reaction kind
  """
  reactionKindId: Int!
  reactionName: String!
  study: Study!
  user: User!
}

type ReactionKind {
  """
  Id
  """
  id: Int!

  """
  Name of reaction example is like or dislike
  """
  name: String!

  """
  Unicode for emoji used in reaction
  """
  unicode: String!
}

"""
Autogenerated input type of ResetPassword
"""
input ResetPasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of ResetPassword
"""
type ResetPasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

type ResultButtonItems {
  icon: String!
  target: String!
}

type ResultsButton {
  items: [ResultButtonItems!]!
  location: String!
}

type Review implements Timestamps {
  briefTitle: String!
  content: String!
  createdAt: DateTime!
  id: Int!

  """
  Json key value pairs of meta information.
  """
  meta: String!
  nctId: String!
  updatedAt: DateTime!
  user: User!
}

type SavedSearch {
  createdAt: ISO8601DateTime!
  id: Int!
  isSubscribed: Boolean!
  nameLabel: String
  shortLink: ShortLink!
  updatedAt: ISO8601DateTime!
  url: String!
  userId: Int!
}

type SearchExport {
  downloadUrl: String
  filename: String!
  id: Int!
  shortLink: ShortLink!
  user: User!
}

"""
Autogenerated input type of SearchHashMutation
"""
input SearchHashMutationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  params: SearchInput!
}

"""
Autogenerated return type of SearchHashMutation
"""
type SearchHashMutationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  searchHash: ShortLink
}

"""
Attributes for performing a search
"""
input SearchInput {
  """
  an agg to query for, used when retrieving all buckets for an agg
  """
  agg: String

  """
  the aggs we are filtering on
  """
  aggFilters: [AggFilterInput!]

  """
  the values in aggs will be filtered by that paramater using a substring match
  """
  aggOptionsFilter: String

  """
  the values in aggs will be sorted by this option
  """
  aggOptionsSort: [SortInput!]

  """
  the crowd aggs we should filter on
  """
  crowdAggFilters: [AggFilterInput!]

  """
  which page of search results we want. for now, use either page and pageSize or none of them
  """
  page: Int = 1

  """
  how many results we want. for now, use either page and pageSize or none of them
  """
  pageSize: Int = 25

  """
  an optional query -- defaults to current user default query
  """
  q: SearchQueryInput!

  """
  which fields to sort by
  """
  sorts: [SortInput!]
}
input SearchInput2 {
  """
  an agg to query for, used when retrieving all buckets for an agg
  """
  agg: [String]

  crowdAgg: [String]

  """
  the aggs we are filtering on
  """
  aggFilters: [AggFilterInput!]

  """
  the values in aggs will be filtered by that paramater using a substring match
  """
  aggOptionsFilter: String

  """
  the values in aggs will be sorted by this option
  """
  aggOptionsSort: [SortInput!]

  crowdAggOptionsSort: [SortInput!]

  """
  the crowd aggs we should filter on
  """
  crowdAggFilters: [AggFilterInput!]

  """
  which page of search results we want. for now, use either page and pageSize or none of them
  """
  page: Int = 1

  """
  how many results we want. for now, use either page and pageSize or none of them
  """
  pageSize: Int = 25

  """
  an optional query -- defaults to current user default query
  """
  q: SearchQueryInput!

  """
  which fields to sort by
  """
  sorts: [SortInput!]
}

type SearchLog {
  createdAt: ISO8601DateTime!
  id: Int!
  nameDefault: String
  shortLink: ShortLink!
  updatedAt: ISO8601DateTime!
  userId: Int!
}

type SearchParams {
  searchParams: String
}

"""
    An input type for a search query param (q).
    This is a tree like structure where leafs are the search terms and
    tree nodes are the AND / OR conditions.
"""
input SearchQueryInput {
  """
  Children element
  """
  children: [SearchQueryInput!] = []

  """
  For non-leaf elements this is `AND` or `OR`. For leafs - it's the search term
  """
  key: String!
}

type SearchResultSet {
  aggs: [Agg!]

  """
  autocomplete result
  """
  autocomplete: [Autocomplete!]

  """
  Total results
  """
  recordsTotal: Int

  """
  A set of matching studies
  """
  studies: [ElasticStudy!]!

  """
  Return study decorated with navigation cursors for current search
  """
  studyEdge(
    """
    When id is null returns first edge in the search results.
    """
    id: String
  ): StudyEdge
}

type ShortLink {
  long: String
  short: String
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  oAuthToken: String
  password: String
}

"""
Autogenerated return type of SignIn
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Json web token
  """
  jwt: String

  """
  Signed in user
  """
  user: User
}

"""
Autogenerated input type of SignUp
"""
input SignUpInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  defaultQueryString: String
  email: String!
  oAuthToken: String
  password: String
}

"""
Autogenerated return type of SignUp
"""
type SignUpPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]

  """
  Json web token
  """
  jwt: String

  """
  Signed up user
  """
  user: User
}

type Site {
  editors: [User!]!
  hideDonation: Boolean
  id: Int!
  name: String!
  owners: [User!]!
  pageView(url: String): PageView
  pageViews: [PageView!]
  reactionsConfig: String!
  siteView(url: String): SiteView!
  siteViews: [SiteView!]!
  skipLanding: Boolean
  subdomain: String!
  themes: String!
  userRank: String!
}

type SiteAggField {
  aggSublabel: String
  autoSuggest: Boolean!
  bucketKeyValuePairs: [BucketKeyValuePairs!]
  defaultToOpen: Boolean
  display: FieldDisplay!
  displayName: String!
  layout: String
  maxCrumbs: Int
  name: String!
  order: SiteOrder
  preselected: SiteSelect!
  rangeEndLabel: String
  rangeStartLabel: String
  rank: Int
  showAllowMissing: Boolean
  showFilterToolbar: Boolean
  visibleOptions: SiteSelect!
}

type SiteAggSection {
  fields: [SiteAggField!]!
  selected: SiteSelect!
}

type SiteAutoSuggestSection {
  aggs: SiteAggSection!
  crowdAggs: SiteAggSection!
  fields: [String!]!
}

type SiteConfigField {
  showAutoSuggest: Boolean!
  showBreadCrumbs: Boolean!
  showFacetBar: Boolean!
  showPresearch: Boolean!
  showResults: Boolean!
}

type SiteConfigSection {
  fields: SiteConfigField!
}

type SiteOrder {
  desc: Boolean!
  sortKind: SortKind!
}

type SitePresearchPage {
  aggs: SiteAggSection!
  button: PresearchButtonSection!
  crowdAggs: SiteAggSection!
  fields: [String!]!
  instructions: String!
  showResults: Boolean
}

type SiteResultsSection {
  buttons: ResultsButton!
  type: String!
}

type SiteSearchPage {
  aggs: SiteAggSection!
  autoSuggest: SiteAutoSuggestSection!
  config: SiteConfigSection!
  crowdAggs: SiteAggSection!
  crumbs: CrumbResultSection!
  fields: [String!]!
  presearch: SitePresearchPage!
  results: SiteResultsSection!
  sortables: [String!]!
  template: String!
  type: String!
}

type SiteSelect {
  kind: FilterKind!
  values: [String!]!
}

type SiteStudyBasicGenericSection {
  hide: Boolean!
  kind: String!
  name: String!
  title: String!
}

type SiteStudyExtendedGenericSection {
  hide: Boolean!
  kind: String!
  name: String!
  order: Int
  template: String
  title: String!
}

type SiteStudyPage {
  allFields: [String!]!
  basicSections: [SiteStudyBasicGenericSection!]!
  extendedSections: [SiteStudyExtendedGenericSection!]!
}

type SiteView {
  default: Boolean
  description: String
  id: Int!
  name: String
  search: SiteSearchPage!
  study: SiteStudyPage!
  url: String
}

"""
An atomic mutation of site
"""
input SiteViewMutationInput {
  operation: SiteViewOperation!

  """
  Path to updated element in json. For arrays use `name` attribute element for path value
  """
  path: [String!]!

  """
  Json for this operation
  """
  payload: String!
}

"""
Possible set of operations of site view
"""
enum SiteViewOperation {
  DELETE
  PUSH
  SET
}

"""
Column to sort by
"""
type Sort {
  """
  Sort in descending order if true
  """
  desc: Boolean

  """
  Column to sort by
  """
  id: String!
}

"""
Column to sort by
"""
input SortInput {
  """
  Sort in descending order if true
  """
  desc: Boolean = false

  """
  Column to sort by
  """
  id: String!
}

enum SortKind {
  count
  key
}

"""
AACT Stydy entity
"""
type Study implements Timestamps {
  acronym: String
  ages: String!
  averageRating: Float!
  baselinePopulation: String
  biospecDescription: String
  biospecRetention: String
  briefSummary: String
  briefTitle: String!
  centralContacts: [CentralContact!]!
  collaborators: String!
  completionDate: DateTime
  completionDateType: String
  completionMonthYear: String
  conditions: String
  conditions2: [Condition!]
  contacts: String!
  createdAt: DateTime!
  design: Design!
  designGroups: [DesignGroup!]!
  detailedDescription: String
  dislikesCount: Int!
  dispositionFirstPostedDate: String
  dispositionFirstPostedDateType: String
  dispositionFirstSubmittedDate: String
  dispositionFirstSubmittedQcDate: String
  eligibilityCriteria: String!
  eligibilityGender: String!
  eligibilityHealthyVolunteers: String!
  enrollment: Int
  enrollmentType: String
  expandedAccessTypeIndividual: String
  expandedAccessTypeIntermediate: String
  expandedAccessTypeTreatment: String
  extendedInterventions: [ExtendedIntervention!]!
  facilities: [Facility!]!
  firstReceivedDate: DateTime
  hasDataMonitoringCommittee: Boolean!
  hasDmc: String
  hasExpandedAccess: String
  interventions: [Intervention!]!
  investigators: String!
  ipdAccessCriteria: String
  ipdTimeFrame: String
  ipdUrl: String
  isFdaRegulated: Boolean!
  isFdaRegulatedDevice: String
  isFdaRegulatedDrug: String
  isPpsd: String
  isUnapprovedDevice: String
  isUsExport: String
  lastChangedDate: DateTime
  lastKnownStatus: String
  lastUpdatePostedDate: String
  lastUpdatePostedDateType: String
  lastUpdateSubmittedDate: String
  lastUpdateSubmittedQcDate: String
  likesCount: Int!
  limitationsAndCaveats: String
  listedLocationCountries: String!
  nctId: String!
  nlmDownloadDateDescription: String
  numberOfArms: String
  numberOfGroups: String
  officialTitle: String
  otherStudyIds: String!
  overallOfficials: [OverallOfficial!]!
  overallStatus: String!
  phase: String
  planToShareIpd: String
  planToShareIpdDescription: String
  primaryCompletionDate: DateTime
  primaryCompletionDateType: String
  primaryCompletionMonthYear: String
  primaryMeasures: String
  publications: String!
  reactionsCount: [ExpressionCount!]
  removedLocationCountries: String!
  responsibleParty: String!
  resultsFirstPostedDate: String
  resultsFirstPostedDateType: String
  resultsFirstSubmittedDate: String
  resultsFirstSubmittedQcDate: String
  reviews: [Review!]!
  reviewsCount: Int!
  secondaryMeasures: String
  source: String!
  sponsor: String!
  startDate: DateTime
  startDateType: String
  startMonthYear: String
  studyArms: String!
  studyFirstPostedDate: String
  studyFirstPostedDateType: String
  studyFirstSubmittedDate: String
  studyFirstSubmittedQcDate: String
  studyType: String!
  studyViewCount: Int
  targetDuration: String
  type: String!
  updatedAt: DateTime!
  verificationDate: DateTime
  verificationMonthYear: String
  whyStopped: String
  wikiPage: WikiPage
}

"""
Study decorated with navigation cursors
"""
type StudyEdge {
  """
  The index of the study in the results
  """
  counterIndex: Int

  """
  Id of the first study
  """
  firstId: String

  """
  Study is in a workflow mode
  """
  isWorkflow: Boolean!

  """
  Id of the last study
  """
  lastId: String

  """
  Id of a next study
  """
  nextId: String

  """
  Id of a previous study
  """
  prevId: String

  """
  Total number of records
  """
  recordsTotal: Int!

  """
  Study
  """
  study: Study!

  """
  Workflow name if any
  """
  workflowName: String
}

"""
Set of facet states for a particular study
"""
type StudyFacetState {
  nctId: String
  state: [FacetState!]
}

input StudyFacetStateInput {
  nctId: String!
  state: [FacetStateInput!]!
}

type StudyViewLog {
  createdAt: ISO8601DateTime!
  study: Study!
  updatedAt: ISO8601DateTime!
  userId: Int
}

interface Timestamps {
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Autogenerated input type of UpdatePageView
"""
input UpdatePageViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  default: Boolean
  id: Int!
  mutations: [SiteViewMutationInput!]
  pageType: String
  template: String
  title: String
  url: String
}

"""
Autogenerated return type of UpdatePageView
"""
type UpdatePageViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  pageView: PageView
}

"""
Autogenerated input type of UpdatePassword
"""
input UpdatePasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  passwordConfirmation: String!
  resetPasswordToken: String!
}

"""
Autogenerated return type of UpdatePassword
"""
type UpdatePasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors with token, either does not match user or expired
  """
  errors: String!

  """
  Sign in token if no error
  """
  jwt: String
  user: User!
}

"""
Autogenerated input type of UpdateProfile
"""
input UpdateProfileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  defaultQueryString: String
  firstName: String
  lastName: String
}

"""
Autogenerated return type of UpdateProfile
"""
type UpdateProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  user: User
}

"""
Autogenerated input type of UpdateReaction
"""
input UpdateReactionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  ID of reaction
  """
  id: Int!
  reactionKindId: Int!
}

"""
Autogenerated return type of UpdateReaction
"""
type UpdateReactionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  reaction: Reaction
}

"""
Autogenerated input type of UpdateSite
"""
input UpdateSiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  editorEmails: [String!]
  hideDonation: Boolean
  id: Int!
  name: String
  reactionsConfig: String
  skipLanding: Boolean
  subdomain: String
  themes: String
  userRank: String
}

"""
Autogenerated return type of UpdateSite
"""
type UpdateSitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  site: Site
}

"""
Autogenerated input type of UpdateSiteView
"""
input UpdateSiteViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  default: Boolean
  description: String
  id: Int!
  mutations: [SiteViewMutationInput!]!
  name: String
  type: String
  url: String
}

"""
Autogenerated return type of UpdateSiteView
"""
type UpdateSiteViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  siteView: SiteView
}

"""
Autogenerated input type of UpdateWikiContent
"""
input UpdateWikiContentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Markdown version of the text
  """
  content: String!
  nctId: String!
}

"""
Autogenerated return type of UpdateWikiContent
"""
type UpdateWikiContentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  wikiPage: WikiPage
}

"""
Autogenerated input type of UpdateWikiSections
"""
input UpdateWikiSectionsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nctId: String!
  sections: [WikiSectionInput!]!
}

"""
Autogenerated return type of UpdateWikiSections
"""
type UpdateWikiSectionsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  wikiPage: WikiPage
}

"""
Autogenerated input type of UpdateWorkflowsView
"""
input UpdateWorkflowsViewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  mutations: [SiteViewMutationInput!]!
}

"""
Autogenerated return type of UpdateWorkflowsView
"""
type UpdateWorkflowsViewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  workflowsView: WorkflowsView
}

"""
Autogenerated input type of UpsertReview
"""
input UpsertReviewInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Markdown version of the text
  """
  content: String!
  id: Int

  """
  Json key value pairs of meta information.
  """
  meta: String!
  nctId: String!
}

"""
Autogenerated return type of UpsertReview
"""
type UpsertReviewPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  review: Review
}

"""
Autogenerated input type of UpsertWikiLabel
"""
input UpsertWikiLabelInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Label key
  """
  key: String!
  nctId: String!

  """
  Label value
  """
  value: String!
}

"""
Autogenerated return type of UpsertWikiLabel
"""
type UpsertWikiLabelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  wikiPage: WikiPage
}

"""
Autogenerated input type of UpsertWikiTag
"""
input UpsertWikiTagInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  nctId: String!

  """
  Tag value
  """
  value: String!
}

"""
Autogenerated return type of UpsertWikiTag
"""
type UpsertWikiTagPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  wikiPage: WikiPage
}
type Role {
    id: Int!,
    name: String!,
    resource_type: String,
    resource_id: Int,
    created_at: DateTime!,
    updated_at: DateTime!
}

type User {
  contributions: Int!

  """
  Default query for user
  """
  defaultQueryString: String
  dislikeCount: Int
  dislikedStudies: [Study!]
  editorSites: [Site!]!

  """
  Email
  """
  email: String!

  """
  Feed list. Available only for current user
  """
  feeds: [Feed!]!

  """
  First name
  """
  firstName: String

  """
  Id
  """
  id: Int!

  """
  Last name
  """
  lastName: String
  likeCount: Int
  likedStudies: [Study!]
  ownSites: [Site!]!
  pictureUrl: String
  rank: String
  reactions(limit: Int, nctId: String, offset: Int, reactionKindId: String): [Reaction!]
  reactionsCount: [ExpressionCount!]

  """
  Number of reviews the user has done
  """
  reviewCount: Int!
  reviews: [Review!]!
  roles: [Role]!
  savedSearches: [SavedSearch!]
  searchLogs(limit: Int, offset: Int): [SearchLog!]
  studyViewLogs(limit: Int, offset: Int): [StudyViewLog!]
}

type WikiPage implements Timestamps {
  content: String!
  createdAt: DateTime!
  edits: [WikiPageEdit!]!

  """
  Json key value pairs of meta information
  """
  meta: String!
  meta2: [Meta!]!
  nctId: String!
  updatedAt: DateTime!
}

type WikiPageEdit implements Timestamps {
  changeSet: WikiPageEdits!
  comment: String
  createdAt: DateTime!
  diff: String
  diffHtml: String
  id: Int!
  updatedAt: DateTime!
  user: User
  wikiPage: WikiPage!
}

type WikiPageEditLine {
  """
  Whether the line is in the body.
  """
  body: Boolean!

  """
  The content of the line.
  """
  content: String!

  """
  Whether the line is in the front matter.
  """
  frontMatter: Boolean!

  """
  The type of diff line.
  """
  status: Diff!
}

type WikiPageEdits {
  bodyChanged: Boolean!
  editLines: [WikiPageEditLine!]!
  frontMatterChanged: Boolean!
}

"""
A wiki section input
"""
input WikiSectionInput {
  content: String!
  name: String!
}

"""
Article from https://www.wikipedia.org/
"""
type WikipediaArticle {
  """
  Brief description
  """
  description: String!

  """
  Id of the article on Wikipedia
  """
  id: Int!

  """
  Artictle title
  """
  title: String!

  """
  Wikipedia url
  """
  url: String!
}

type WorkflowAggField {
  display: FieldDisplay!
  name: String!
  order: SiteOrder
  rank: Int
  visibleOptions: SiteSelect!
}

type WorkflowConfig {
  allSuggestedLabels: [String!]!
  allSummaryFields: [String!]!
  allWikiSections: [String!]!
  disableAddRating: Boolean!
  hideReviews: Boolean!
  name: String!
  suggestedLabelsConfig: [WorkflowAggField!]!
  suggestedLabelsFilter: SiteSelect!
  summaryFieldsFilter: SiteSelect!
  summaryTemplate: String!
  wikiSectionsFilter: SiteSelect!
}

type WorkflowsView {
  id: Int!
  workflows: [WorkflowConfig!]!
}