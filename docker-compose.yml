version: "3.4"
services:
    nginx:
        image: nginx:stable
        container_name: nginx
        build:
            context: .
            dockerfile: compose/Dockerfile
        volumes:
            - ./compose/nginx:/etc/nginx/conf.d
        depends_on:
            - nodejs
        ports:
            - 80:80
    db:
        image: postgres:11.8
        container_name: clinwiki-db
        ports:
            - 15432:5432
        volumes:
            - cw-data:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=$POSTGRES_USER
            - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
            - DATABASE_URL=$DATABASE_URL
    elastic:
        image: elasticsearch:6.8.8
        container_name: elastic
        ports:
            - 9200:9200
        environment:
            - discovery.type=single-node
            - http.port=9200
            - http.cors.enabled=true
            - http.cors.allow-origin=http://localhost:3030,http://127.0.0.1:3030,http://localhost:1358,http://127.0.0.1:1358,https://opensource.appbase.io
            - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
            - http.cors.allow-credentials=true
            - xpack.security.enabled=true
            - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - es-data:/usr/share/elasticsearch/data/
    kibana:
        image: docker.elastic.co/kibana/kibana:6.8.0
        container_name: kibana
        environment:
            - ELASTICSEARCH_HOSTS=http://elastic:9200/
            - ELASTICSEARCH_USERNAME=elastic
            - ELASTICSEARCH_PASSWORD=$ELASTIC_PASSWORD
        ports:
            - 5601:5601
    # redis:
    #   image: redis:5.0.5
    #   container_name: redis
    #   volumes:
    #     - redis-data:/data
    # clinwiki:
    #   image: cwlite
    #   build:
    #     context: .
    #     dockerfile: compose/Dockerfile
    #   container_name: clinwiki
    #   ports:
    #     - 3000:3000
    #   volumes:
    #     - .:/clinwiki
    #     - ./compose/entrypoint.sh:/usr/bin/entrypoint.sh
    #     - node_modules:/clinwiki/front/node_modules
    #   env_file:
    #     - .env
    #   environment:
    #     - DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432
    #     - REDIS_URL=redis://redis:6379/0
    #     - SEARCHBOX_URL=http://elastic:$ELASTIC_PASSWORD@elastic:9200/
    #   depends_on:
    #     - db
    #     - elastic
    #     - redis
    # sidekiq:
    #   image: cwlite
    #   build:
    #     context: .
    #     dockerfile: compose/Dockerfile
    #   container_name: sidekiq
    #   volumes:
    #     - .:/clinwiki
    #   env_file:
    #     - .env
    #   environment:
    #     - DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432
    #     - REDIS_URL=redis://redis:6379/0
    #     - SEARCHBOX_URL=http://elastic:$ELASTIC_PASSWORD@elastic:9200/
    #   depends_on:
    #     - db
    #     - elastic
    #     - redis
    #   command: bundle exec sidekiq -C config/sidekiq.yml
    nodejs:
        image: keymetrics/pm2:14-alpine
        env_file:
            - .env
        build:
            context: .
            dockerfile: api/Dockerfile
        command: npm start
        container_name: nodejs
        volumes:
            - .:/api
        ports:
            - 8088:8088
        environment:
            - DATABASE_URL_NODE=$DATABASE_URL
            - SEARCHBOX_URL_NODE=http://elastic:$ELASTIC_PASSWORD@elastic:9200/
        depends_on:
            - db
            - elastic
    data-pipeline:
        image: keymetrics/pm2:14-alpine
        env_file:
            - .env
        build:
            context: .
            dockerfile: api/Dockerfile
        command: npm run pipeline-start
        container_name: data-pipeline
        volumes:
            - .:/api
        environment:
            - DATABASE_URL_NODE=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432
            - SEARCHBOX_URL_NODE=http://elastic:$ELASTIC_PASSWORD@elastic:9200/
        depends_on:
            - db
            - elastic
    graphql-engine:
        image: hasura/graphql-engine:v2.0.0-alpha.10
        container_name: hasura
        ports:
            - 5532:5532
        depends_on:
            - 'db'
        environment:
            HASURA_GRAPHQL_DATABASE_URL: 'postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432'
            HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
            HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
            HASURA_GRAPHQL_ADMIN_SECRET: nlYl98VbkFw9
            HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
            HASURA_GRAPHQL_SERVER_PORT: 5532
            HASURA_GRAPHQL_JWT_SECRET: '{"key":"aa3312a3dc6c430194e3cab28b163c6b","type":"HS256"}'

volumes:
    es-data:
    cw-data:
    redis-data:
    node_modules:
